type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class FileServerTest extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram client = new TestedProgram("client");
            TestedProgram server = new TestedProgram("server");
            server.setReturnOutputAfterExecution(true);

            server.startInBackground();

            Thread.sleep(1000);
            String serverOutput = server.getOutput().trim();

            String serverStartedMessage = "Server started!";
            if (!serverOutput.equals(serverStartedMessage)) {
                throw new WrongAnswer("Server output should be \"" + serverStartedMessage + "\" until the client connects!");
            }

            String clientOutput = client.start().trim();
            serverOutput = server.getOutput().trim();

            if (clientOutput.isEmpty()) {
                return CheckResult.wrong("Client output shouldn't be empty!");
            }

            if (serverOutput.equals(serverStartedMessage)) {
                return CheckResult.wrong("After the client connects to the server you should output the received data!");
            }

            if (!serverOutput.contains("Received: Give me everything you have!")) {
                return CheckResult.wrong("Server output should contain \"Received: Give me everything you have!\"");
            }

            if (!serverOutput.contains("Sent: All files were sent!")) {
                return CheckResult.wrong("Server output should contain \"Sent: All files were sent!\"");
            }

            if (serverOutput.indexOf("Sent: All files were sent!") < serverOutput.indexOf("Received: Give me everything you have!")) {
                return CheckResult.wrong("The server should print \"Sent: All files were sent!\" only after " +
                    "\"Received: Give me everything you have!\" was printed!");
            }

            if (!clientOutput.contains("Sent: Give me everything you have!")) {
                return CheckResult.wrong("Client output should contain \"Sent: Give me everything you have!\"");
            }

            if (!clientOutput.contains("Received: All files were sent!")) {
                return CheckResult.wrong("Client output should contain \"Received: All files were sent!\"");
            }

            if (clientOutput.indexOf("Received: All files were sent!") < clientOutput.indexOf("Sent: Give me everything you have!")) {
                return CheckResult.wrong("The client should print \"Received: All files were sent!\" only after " +
                    "\"Sent: Give me everything you have!\" was printed!");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/Menu.java
  visible: true
  text: |
    package server;

    import java.util.HashSet;
    import java.util.Scanner;
    import java.util.Set;

    public class Menu {
        private final Scanner scanner = new Scanner(System.in);
        private final Set<String> storage = new HashSet<>();

        public void run() {
            while (true) {
                String input = scanner.nextLine().strip();

                String[] parts = input.split("\\s+");
                String command = parts[0];
                String fileName = parts.length > 1 ? parts[1] : null;

                switch (command) {
                    case "add":
                        addFile(fileName);
                        break;
                    case "get":
                        getFile(fileName);
                        break;
                    case "delete":
                        deleteFile(fileName);
                        break;
                    case "exit":
                        scanner.close();
                        return;
                    default:
                        break;
                }
            }

        }

        private void deleteFile(String fileName) {
            if (fileName != null && storage.remove(fileName)) {
                System.out.println("The file " + fileName + " was deleted");
            } else {
                System.out.println("The file " + fileName + " not found");
            }
        }

        private void getFile(String fileName) {
            if (fileName != null && storage.contains(fileName)) {
                System.out.println("The file " + fileName + " was sent");
            } else {
                System.out.println("The file " + fileName + " not found");
            }
        }

        private void addFile(String fileName) {
            if (fileName != null && fileName.matches("file[1-9]0?") && storage.add(fileName)) {
                System.out.println("The file " + fileName + " added successfully");
            } else {
                System.out.println("Cannot add the file " + fileName);
            }
        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  learner_created: true
- name: src/client/Client.java
  visible: true
  learner_created: true
- name: src/client/Main.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/52/stages/284/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 10 Dec 2021 13:49:42 UTC
record: 2
