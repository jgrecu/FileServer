type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |-
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/FileServerTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.net.ConnectException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;

    import static org.hyperskill.hstest.common.Utils.sleep;

    public class FileServerTest extends StageTest<String> {

        private static final String onConnectExceptionMessage = "A client can't connect to the server!\n" +
            "Make sure the server handles connections and doesn't stop after one client connected.";

        public static final String serverDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "server" + File.separator + "data" + File.separator;

        public static final String clientDataPath = System.getProperty("user.dir") +
            File.separator + "src" + File.separator + "client" + File.separator + "data" + File.separator;

        private static String id;

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkServerStop),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::checkPaths),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testSaveAndGet),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testGetAfterServerRestart),
                new TestCase<String>()
                    .feedbackOnException(ConnectException.class, onConnectExceptionMessage)
                    .setDynamicTesting(this::testDeleteFiles)
            );
        }

        // Test #1. Check if server stops
        CheckResult checkServerStop() {

            TestedProgram server = getServer();
            TestedProgram client;

            server.startInBackground();

            client = getClient();
            client.start();
            client.execute("exit");

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            if (!server.isFinished()) {
                return CheckResult.wrong("You should stop the server if a client sends 'exit'");
            }

            return CheckResult.correct();
        }

        CheckResult checkPaths() {
            // Test #2. Check folders with data
            if (!Files.exists(Paths.get(serverDataPath)) || !Files.isDirectory(Paths.get(serverDataPath))) {
                return CheckResult.wrong("Can't find '/server/data' folder. You should store all saved files in it!\n" +
                    "The folder should be created even if the server wasn't started!");
            }

            if (!Files.exists(Paths.get(clientDataPath)) || !Files.isDirectory(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find '/client/data' folder. You should store all files you want to " +
                    "store on the server in it!\n" +
                    "The folder should be created even if the client wasn't started!");
            }
            return CheckResult.correct();
        }


        CheckResult testSaveAndGet() {

            TestedProgram server;
            TestedProgram client;

            Utils.createFiles(clientDataPath);

            // Test #3. Check saving file on the server
            server = getServer();
            server.startInBackground();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeAdding = Utils.numExistingFiles(folder);

            client = getClient();
            client.start();
            client.execute("2\ntest_purpose_test1.txt");
            String clientOutput = client.execute("");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            id = Utils.findId(clientOutput);

            int numOfFilesAfterAdding = Utils.numExistingFiles(folder);

            if (numOfFilesAfterAdding == numOfFilesBeforeAdding) {
                return CheckResult.wrong("Once a client saved a file on the server number of files in /server/data/ should be changed!");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("2\ntest_purpose_test2.txt\ntest_purpose_newFile.txt");

            if (!clientOutput.contains("Response says that file is saved! ID =")) {
                return CheckResult.wrong("After saving a file on the server you should print:\n" +
                    "Response says that file is saved! ID = **, where ** is an id of the file!");
            }

            if (!Utils.isServerFileExists("test_purpose_newFile.txt")) {
                return CheckResult.wrong("Can't find a file after saving on the server." +
                    "You should save client's files in /server/data/ folder!");
            }

            String savedFileContent = Utils.getServerFileContent("test_purpose_newFile.txt");

            if (!savedFileContent.equals("test2")) {
                return CheckResult.wrong("A file after saving has wrong content!");
            }

            // Test #4. Check getting files
            client = getClient();
            client.start();
            clientOutput = client.execute("1\n1\ntest_purpose_notExist.txt");

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by name that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            clientOutput = client.execute("1\n2\n" + (id + "511"));

            if (!clientOutput.contains("The response says that this file is not found!")) {
                return CheckResult.wrong("When client tries to get a file by ID that doesn't exist you should print:\n" +
                    "\"The response says that this file is not found!\"");
            }

            client = getClient();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get.txt");

            if (!Utils.isClientFileExists("test_purpose_get.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByNameFileContent = Utils.getClientFileContent("test_purpose_get.txt");
            if (!downloadedByNameFileContent.equals("test2")) {
                return CheckResult.wrong("After getting a file from the server by name it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_id.txt");

            if (!Utils.isClientFileExists("test_purpose_get_id.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            String downloadedByIdFileContent = Utils.getClientFileContent("test_purpose_get_id.txt");
            if (!downloadedByIdFileContent.equals("test1")) {
                return CheckResult.wrong("After getting a file from the server by ID it has wrong content!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testGetAfterServerRestart() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            server.startInBackground();
            client.start();
            client.execute("1\n1\ntest_purpose_newFile.txt\ntest_purpose_get_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by name.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("1\n2\n" + id + "\ntest_purpose_get_by_id_after_restart.txt");

            if (!Utils.isClientFileExists("test_purpose_get_by_id_after_restart.txt")) {
                return CheckResult.wrong("Can't find a file after getting it from the server by ID.\n" +
                    "Looks like your server lose all stored files after restart.\n" +
                    "You should store all downloaded files from the server in /client/data/ folder.");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }

        CheckResult testDeleteFiles() {

            TestedProgram server = getServer();
            TestedProgram client = getClient();

            File folder = new File(serverDataPath);
            int numOfFilesBeforeDeleting = Utils.numExistingFiles(folder);

            server.startInBackground();
            client.start();
            client.execute("3\n1\ntest_purpose_newFile.txt");

            sleep(2000);
            int numOfFilesAfterDeletingByName = Utils.numExistingFiles(folder);
            if (numOfFilesBeforeDeleting == numOfFilesAfterDeletingByName) {
                return CheckResult.wrong("Once a client deleted a file by name from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("3\n2\n" + id);

            sleep(2000);
            int numOfFilesAfterDeletingById = Utils.numExistingFiles(folder);
            if (numOfFilesAfterDeletingByName == numOfFilesAfterDeletingById) {
                return CheckResult.wrong("Once a client deleted a file by ID from the server, " +
                    "number of files in /server/data/ should be fewer!");
            }

            client = getClient();
            client.start();
            client.execute("exit");

            return CheckResult.correct();
        }


        @AfterClass
        public static void afterTestDeleteFiles() {
            Utils.deleteTestFiles();
        }

        public static TestedProgram getClient() {
            return new TestedProgram("client");
        }

        public static TestedProgram getServer() {
            return new TestedProgram("server");
        }
    }


  learner_created: false
- name: src/server/Menu.java
  visible: true
  text: |
    package server;

    import java.util.HashSet;
    import java.util.Scanner;
    import java.util.Set;

    public class Menu {
        private final Scanner scanner = new Scanner(System.in);
        private final Set<String> storage = new HashSet<>();


        public void run() {
            while (true) {
                String input = scanner.nextLine().strip();

                String[] parts = input.split("\\s+");
                String command = parts[0];
                String fileName = parts.length > 1 ? parts[1] : null;

                switch (command) {
                    case "add":
                        addFile(fileName);
                        break;
                    case "get":
                        getFile(fileName);
                        break;
                    case "delete":
                        deleteFile(fileName);
                        break;
                    case "exit":
                        scanner.close();
                        return;
                    default:
                        break;
                }
            }

        }

        private void deleteFile(String fileName) {
            if (fileName != null && storage.remove(fileName)) {
                System.out.println("The file " + fileName + " was deleted");
            } else {
                System.out.println("The file " + fileName + " not found");
            }
        }

        private void getFile(String fileName) {
            if (fileName != null && storage.contains(fileName)) {
                System.out.println("The file " + fileName + " was sent");
            } else {
                System.out.println("The file " + fileName + " not found");
            }
        }

        private void addFile(String fileName) {
            if (fileName != null && fileName.matches("file[1-9]0?") && storage.add(fileName)) {
                System.out.println("The file " + fileName + " added successfully");
            } else {
                System.out.println("Cannot add the file " + fileName);
            }
        }
    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.util.Scanner;

    public class Client {
        private final Scanner scanner = new Scanner(System.in);
        private final String address = "127.0.0.1";
        private final int port = 23456;

        public void start() {
            try (Socket socket = new Socket(InetAddress.getByName(address), port)
            ) {
                try (DataInputStream input = new DataInputStream(socket.getInputStream());
                     DataOutputStream output = new DataOutputStream(socket.getOutputStream())) {

                    String stringText = "Give me everything you have!";
                    System.out.print("Enter action (1 - get a file, 2 - create a file, 3 - delete a file): ");

                    String option = scanner.nextLine().strip();

                    switch (option) {
                        case "1":
                            stringText = get();
                            break;
                        case "2":
                            stringText = create();
                            break;
                        case "3":
                            stringText = delete();
                            break;
                        case "exit":
                            stringText = "exit";
                            break;
                        default:
                            break;
                    }

                    output.writeUTF(stringText);
                    //System.out.println("-----Sent: " + stringText);
                    System.out.println("The request was sent.");
                    if (!"exit".equals(option)) {
                        String receivedMsg = input.readUTF();
                        //System.out.println("-----Received: " + receivedMsg);
                        processResponse(option, receivedMsg);
                    }
                }
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }

        private void processResponse(String option, String receivedMsg) {
            switch (option) {
                case "1":
                    if (receivedMsg.startsWith("200")) {
                        System.out.println("The content of the file is: " + receivedMsg.split("\\s+", 2)[1]);
                    } else {
                        System.out.println("The response says that the file was not found!");
                    }
                    break;
                case "2":
                    if (receivedMsg.startsWith("200")) {
                        System.out.println("The response says that the file was created!");
                    } else {
                        System.out.println("The response says that creating the file was forbidden!");
                    }
                    break;
                case "3":
                    if (receivedMsg.startsWith("200")) {
                        System.out.println("The response says that the file was successfully deleted!");
                    } else {
                        System.out.println("The response says that the file was not found!");
                    }
                    break;
                default:
                    break;
            }
        }

        private String get() {
            System.out.print("Enter filename: ");
            String fileName = scanner.nextLine().strip();
            return "GET " + fileName;
        }

        private String create() {
            System.out.print("Enter filename: ");
            String fileName = scanner.nextLine().strip();
            System.out.print("Enter file content: ");
            String fileContent = scanner.nextLine().strip();
            return "PUT " + fileName + " " + fileContent;
        }

        private String delete() {
            System.out.print("Enter filename: ");
            String fileName = scanner.nextLine().strip();
            return "DELETE " + fileName;
        }
    }
  learner_created: true
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {
        public static void main(String[] args) {
            Client client = new Client();
            client.start();
        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.nio.file.Files;
    import java.nio.file.Path;

    public class Server {
        private final String address = "127.0.0.1";
        private final int port = 23456;
        private String fileName;
        private String fileContents;


        public void start() {
            try (ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address))
            ) {
                System.out.println("Server started!");
                while (true) {
                    Socket socket = server.accept();
                    try (DataInputStream input = new DataInputStream(socket.getInputStream());
                         DataOutputStream output = new DataOutputStream(socket.getOutputStream())) {
                        String receivedMsg = input.readUTF();
                        String[] parts = receivedMsg.split("\\s+", 3);
                        Commands command = Commands.valueOf(parts[0]);
                        if (parts.length == 2) {
                            fileName = parts[1];
                        } else if (parts.length > 2) {
                            fileName = parts[1];
                            fileContents = parts[2];
                        }
                        if (command == Commands.exit) {
                            socket.close();
                            return;
                        }
                        //System.out.println("Received: " + receivedMsg);
                        String responseCode = processFile(command);
                        output.writeUTF(responseCode);
                        //System.out.println("Sent: " + responseCode);
                    }
                }
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }

        private String processFile(Commands command) {
            String response = "";
            switch (command) {
                case GET:
                    if (fileName == null) {
                        return "404";
                    }
                     response = get(fileName);
                    fileName = null;
                    fileContents = null;
                    return response;

                case PUT:
                    if (fileName == null && fileContents == null) {
                        return "403";
                    }
                     response = put(fileName, fileContents);
                    fileName = null;
                    fileContents = null;
                    return response;
                case DELETE:
                    if (fileName == null && fileContents == null) {
                        return "404";
                    }
                    response = delete(fileName);
                    fileName = null;
                    fileContents = null;
                    return response;
            }
            return "400";
        }

        private String get(String fileName) {
            Path root = Path.of(System.getProperty("user.dir"), "src", "server", "data", fileName);
            //System.out.println(root);
            if (Files.exists(root)) {
                try {
                    fileContents = new String(Files.readAllBytes(root));
                    return "200 " + fileContents;
                } catch (IOException e) {
                    return "404";
                }

            } else {
                return "404";
            }
        }

        private String put(String fileName, String fileContents) {
            Path root = Path.of(System.getProperty("user.dir"), "src", "server", "data", fileName);
            //System.out.println(root);
            if (Files.notExists(root)) {
                try {
                    Files.write(root, fileContents.getBytes());
                    return "200";
                } catch (IOException e) {
                    return "403";
                }

            } else {
                return "403";
            }
        }

        private String delete(String fileName) {
            Path root = Path.of(System.getProperty("user.dir"), "src", "server", "data", fileName);
            //System.out.println(root + " -> " + Files.exists(root));
            if (Files.exists(root)) {
                try {
                    Files.deleteIfExists(root);
                    return "200";
                } catch (IOException e) {
                    return "404";
                }
            } else {
                return "404";
            }
        }

    }
  learner_created: true
- name: src/server/Commands.java
  visible: true
  text: |
    package server;

    public enum Commands {
        GET, PUT, DELETE, exit;
    }
  learner_created: true
- name: test/Utils.java
  visible: false
  text: |+
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.Arrays;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Utils {
        public static String findId(String output) {
            Pattern pattern = Pattern.compile("ID = (\\d+)");
            Matcher matcher = pattern.matcher(output);

            if (matcher.find()) {
                int count = matcher.groupCount();
                if (count != 1) {
                    throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
                }
                return matcher.group(1);
            } else {
                throw new WrongAnswer("Can't find ID of the file in the output!\nMake sure you print ID like in examples!");
            }
        }

        public static void deleteTestFiles() {
            File dir = new File(FileServerTest.serverDataPath);

            File[] files = dir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe they are not closed!");
                        }
                    }
                }
            }

            File cdir = new File(FileServerTest.clientDataPath);
            files = cdir.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.getName().startsWith("test_purpose_")) {
                        boolean isDeleted = file.delete();
                        if (!isDeleted) {
                            throw new WrongAnswer("Can't delete test files. Maybe their input streams are not closed!");
                        }
                    }
                }
            }
        }

        public static void createFiles(String clientDataPath) {

            for (int i = 0; i < 2; i++) {
                try {
                    File file = new File(clientDataPath + String.format("test_purpose_test%d.txt", i + 1));
                    if (!file.exists()) file.createNewFile();
                    FileWriter writer = new FileWriter(file, false);
                    writer.write(String.format("test%d", i + 1));
                    writer.close();
                } catch (IOException e) {
                    throw new RuntimeException("Can't create test files!");
                }

            }
        }

        public static int numExistingFiles(File file) {
            File[] files = file.listFiles();
            if (files == null) {
                return 0;
            }
            return (int) Arrays.stream(files).filter(File::exists).count();
        }

        private static boolean isFileExists(String path) {
            return Files.exists(Paths.get(path)) && !Files.isDirectory(Paths.get(path));
        }

        public static boolean isClientFileExists(String fileName) {
            return isFileExists(FileServerTest.clientDataPath + fileName);
        }

        public static boolean isServerFileExists(String fileName) {
            return isFileExists(FileServerTest.serverDataPath + fileName);
        }

        public static String getServerFileContent(String fileName) {
            return getFileContent(FileServerTest.serverDataPath + fileName);
        }

        public static String getClientFileContent(String fileName) {
            return getFileContent(FileServerTest.clientDataPath + fileName);
        }

        private static String getFileContent(String fileName) {
            try {
                return new String(Files.readAllBytes(Paths.get(fileName)));
            } catch (IOException e) {
            }
            throw new WrongAnswer("Can't read files content.\n" +
                "Make sure you close input/output streams after reading or writing files!");
        }

    }


  learner_created: false
- name: src/server/FileServer.java
  visible: true
  learner_created: true
- name: src/server/SerializationUtils.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5428#comment
status: Unchecked
record: -1
